use std::str::FromStr;
use crate::ast::*;
grammar;
match {
    // 跳过空白符和注释
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    _
}
pub Expr: Box<Expr> = {
    LOrExpr
}


LOrExpr: Box<Expr> = {
    <lhs:LOrExpr> "||" <rhs:LAndExpr> => Box::new(Expr::BinaryOp(lhs, Op::Or, rhs)),
    LAndExpr,
}

LAndExpr: Box<Expr> = {
    <lhs:LAndExpr> "&&" <rhs:EqExpr> => Box::new(Expr::BinaryOp(lhs, Op::And, rhs)),
    EqExpr,
}


EqExpr: Box<Expr> = {
    <EqExpr> <EqOp> <RelExpr> => Box::new(Expr::BinaryOp(<>)),
    RelExpr,
}

RelExpr: Box<Expr> = {
    <RelExpr> <RelOp> <AddExpr> => Box::new(Expr::BinaryOp(<>)),
    AddExpr,
}



AddExpr: Box<Expr> = {
    <lhs:AddExpr> "+" <rhs:MulExpr> => Box::new(Expr::BinaryOp(lhs, Op::Add, rhs)),
    <lhs:AddExpr> "-" <rhs:MulExpr> => Box::new(Expr::BinaryOp(lhs, Op::Sub, rhs)),
    <MulExpr>,
}

MulExpr: Box<Expr> = {
    <MulExpr> <BinaryOp> <UnaryExpr> => Box::new(Expr::BinaryOp(<>)),
    UnaryExpr,
}

UnaryExpr: Box<Expr> = {
    UnaryOp UnaryExpr => Box::new(Expr::UnaryOp(<>)),
    PrimaryExpr,
}

PrimaryExpr: Box<Expr> = {
    Number => Box::new(Expr::Number(<>)),
    "(" <Expr> ")"
}



RelOp: Op = {
    "<" => Op::Lt,
    ">" => Op::Gt,
    "<=" => Op::Le,
    ">=" => Op::Ge
}

EqOp: Op = {
    "==" => Op::Eq,
    "!=" => Op::Ne
}

UnaryOp: Op = {
    "+" => Op::Add,
    "-" => Op::Sub,
    "!" => Op::Not
}

BinaryOp: Op = {
    "*" => Op::Mul,
    "/" => Op::Div,
    "%" => Op::Mod
}



Number: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
}
